import passion
import tensorflow as tf
import shutil
import pathlib
import os
import shapefile

TEMP_FILE_PATH = pathlib.Path(os.path.dirname(os.path.realpath(__file__))) / "temp"

def analyse_region(
  api_key: str,
  output_path: pathlib.Path,
  model: tf.keras.Model,
  tilt_path: pathlib.Path,
  service: str = 'bing',
  zoom: int = passion.util.gis.MAXZOOM,
  bbox: tuple = None,
  shapefile: shapefile.Shape = None,
  find_valid_zoom: bool = False
):
  '''Manager to perform the full pipeline without including the technical and economic potential at the same time.
  Needs as input:
    - api_key: the API key of the requested service
    - output_path: path where the final sections will be stored.
    - model: tensorflow model that segments the input satellite images.
    - tilt_path: path to the tilt distribution pickle file generated by 00_generate_aachen.
  '''
  satellite_path = TEMP_FILE_PATH / 'satellite'
  segmentation_path = TEMP_FILE_PATH / 'segmentation'
  rooftops_path = TEMP_FILE_PATH / 'rooftops'
  
  passion.satellite.image_retrieval.generate_dataset(api_key, service, satellite_path, zoom = 19, bbox=bbox, shapefile=shapefile, find_valid_zoom=find_valid_zoom)
  passion.segmentation.prediction.segment_dataset(input_path = satellite_path, model = model, output_path = segmentation_path)
  passion.buildings.rooftop_analysis.generate_rooftops(segmentation_path, rooftops_path, 'rooftops')
  passion.buildings.section_analysis.generate_sections(rooftops_path, 'rooftops', output_path, 'sections', tilt_path)
  
  shutil.rmtree(TEMP_FILE_PATH)
  return